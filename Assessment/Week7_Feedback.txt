Starting weekly assessment for Pablo, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 94.04 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, Week8, Week5, Week2, Week9, Week4, .git, Week3, mini_project

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
#Ignore auxiliary latex files
*.aux
*.lof
*.log
*.lot
*.fls
*.out
*.toc
*.fmt
*.fot
*.cb
*.cb2
.*.lb
*.bbl
*.blg
*.synctex.gz

*~ 
*.tmp
*.log
__pycache__/

questions.txt
.DS_Store

########Git ignore for r##########

# History files
.Rhistory
.Rapp.history

# Session Data files
.RData

# User-specific files
.Ruserdata

# Example code in package build process
*-Ex.R

# Output files from R CMD build
/*.tar.gz

# Output files from R CMD check
/*.Rcheck/

# RStudio files
.Rproj.user/

# produced vignettes
vignettes/*.html
vignettes/*.pdf

# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3
.httr-oauth

# knitr and R markdown default cache directories
*_cache/
/cache/

# Temporary files created by R markdown
*.utf8.md
*.knit.md
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# Computational Methods in Ecology and Evolution (CMEE) MSc


## Week 1

### Unix
1. Practicals (`UnixPrac1.txt`)
### Shell scripting 
1. Your first shell script (`boilerplate.sh`)
2. Variables in shell scripts (`tabtocsv.sh`, `variables.sh`, `MyExampleScript.sh`, `CountLines.sh`, `ConcatenateTwoFiles.sh`, `tiff2png.sh`, `csvtospace.sh`)
### Version control with Git
### Scientific documents with LaTeX 
1. A first LaTeX example (`FirstExample.tex`, `FirstBiblio.bib`, `CompileLatex.sh`)

## Week 2 

### Biological computing in Python I
1. Writting python code (`basic_io1.py`, `basic_io2.py`, `basic_io3.py`)
2. Running python scripts (`basic_csv.py`)
3. Control flow tools (`cfexercises1.py`, `cfexercises2.py`, `control_flow.py`, `loops.py`)
4. Comprehensions (`oaks.py`)
5. Variable Scope (`scope.py`)
6. Writing Python programs (`boilerplate.py`, `using_name.py`, `sysargv.py`)
8. Errors in your Python code (`control_flow.py`, `debugme.py`)
7. Practicals (`lc1.py`, `lc2.py`, `dictionary.py`, `tuple.py`, `cfexercises1.py`, `cfexercises2.py`, `align_seqs.py`, `align_fasta.py`, `align_better.py`, `oaks_debugme.py`)

## Week 3
### Biological Computing in R
1. Writing R code (`basic_io.R`)
2. Control flow tools (`control_flow.R`, `break.R`)
3. Writing R functions (`boilerplate.r`)
4. Vectorization (`Vectorize1.R`, `Vectorize2.R`, `preallocate.R`, `sample.R`)
5. Errors and Debugging (`browse.R`)
6. Practicals ('TreeHight `Ricker.R`, `Vectorize1.py`, `Vectorize2.py`, `run_Vectorize.sh`, `TAutoCorr.R`, `TreeHeight.R`, `get_TreeHeight.R`, `run_get_TreeHeight.sh`, `get_TreeHeight.py`)
### Data management, exploration and visualization
1. Data Wrangling (`DataWrang.R`)
2. Practicals (`PP_Lattice.R`, `Girko.R`, `MyBars.R`, `plotLin.R`,`PP_Regress.R`, `PP_Regress_loc.R` )
## Week 4
### Descriptive statistics
2. t-test
3. ANOVA
4. Correlations
5. Linear models
6. Hypothesis testing
## Week 5
### Spatial Analyses and Geographic Information Systmens (GIS)
## Week 6
### Genomics and Bioinformatics
## Week 7
### Biological Computing in Python II
1. Profiling in Python (`profileme.py`, `profileme2.py`, `timetime.py`)
2. Networks in Python (`DrawFW.py`)
3. Practicals (`LV1.py`, `LV2.py`, `LV3.py`, `LV4.py`, `Nets.R`, `regex.py`, `blackbirds.py`, `TestR.R`, `TestR.py`, `using_os.py`, `run_fmr_R.py`, `fmr.R` )
## Week 8
### High Performance Computing (HPC)
## Week 9
### Biological Data Structures and C
## mini_project
    


*Pablo Lechon (plechon@ucm.es)*
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 9 weekly directories: Week1, Week2, Week3, Week4, Week5, Week6, Week7, Week8, Week9

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: Code, Data, Sandbox, Results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# Week 7 README

This folder contains four subfolders: Data, were we store the data used in our code;
Code, were we have the writen code; Sandbox, were we store everything that is not
Data or Code; and Results, where all the results of our code go to.

## Code
1. `Draw.py` - Draw network from class notes
2. `LV1.py` - Integrates the Lotka-Volterra model and outputs a time series plot with the evolution of both sppecies, as well as a phase diagram.
3. `LV2.py` - Integrates the Lotka-Volterra model with a modified prey-density dependence and outputs a time series plot with the evolution of both species, as long as a phase diagram
4. `LV3.py` - Discrete time version of `LV2.py`.
5. `LV4.py` - Discrete version of `LV2.py` with random gaussian fluctuation in the resource growth
6. `Nets.R` - Generates a network plot to be reproduced with python
7. `Nets_R.py` - Reproduction of the R network plot with python
8. `Test.R` - Auxiliary R file to be called from python
9. `TestR.py` - Calling R files from python9 
10. `blackbirds.py` - Regex exercise
11. `fmr.R` - Auxiliary R file to be called from python
12. `profileme.py` - Auxiliary function that will be profiled
13. `profileme2.py` - Auxiliary function to be profiled
14. `regex.py` - Regex practice
15. `run_LV.sh` - Runing LV1 and LV2 with the profiling option on, Save results to profiling.txt
16. `run_fm_r.py` - Run an .R file from python and print in screen the R console output, as well as wether the run was succesful or not
17. `using_os.py` - Find directories and files that satisfy certain conditions using subprocess

## Data
1. `NagyEtAl1999.csv` - Data containing information of metabolic rate and body mass
2. `QMEE_Net_Mat_nodes.csv` - Information on the nodes of ICL colaborations with other entities
3. `QMEE_Net_Mat_edges.csv` - Information on the edges of ICL colaborations with other entities
4. `blackbirds.txt` - Data containing information on species, kingdom, phylum of birds.

## Sandbox
1. `sympy.ipynb` - Python notebook on symbolic calculus

**********************************************************************

Found following files in results directory: TestR.Rout, LV1_model.pdf, fmr_plot.pdf, LV2_model.pdf, LV4_model.pdf, listC.csv, .gitignore, LV3_model.pdf, TestR_errFile.Rout, QMEENet.svg, profiling.txt...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 18 code files: TestR.py, LV3.py, profileme2.py, timeitme.py, blackbirds.py, regex.py, profileme.py, LV4.py, Test.R, fmr.R, using_os.py, LV1.py, DrawFW.py, Nets.R, Nets_R.py, LV2.py, run_fm_r.py, run_LV.sh

======================================================================
Testing script/code files...

======================================================================
Inspecting script file TestR.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3 

'''Calling R from python'''

import subprocess

subprocess.Popen("Rscript --verbose Test.R > ../Results/TestR.Rout 2> \
                 ../Results/TestR_errFile.Rout", shell=True).wait()


**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 98

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.12457s

======================================================================
Inspecting script file LV3.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

'''Discrete time version of LV2.py'''

__appname__ = '[LV3.py]'
__author__ = 'Pablo Lechon (plechon@ucm.es)'
__version__ = '0.0.1'

## IMPORTS ##

import sys
import matplotlib.pylab as p
import scipy as sc

## CONSTANTS ##
if len(sys.argv) ==5:
    r = float(sys.argv[1])
    a = float(sys.argv[2])
    z = float(sys.argv[3])
    e = float(sys.argv[4])
    K = 15

else:
    r = 1.
    a = 0.1
    z = 0.5
    e = 0.7
    K = 19

## FUNCTIONS ##

def discrete_r(R, C):
    '''Calculate next step of the function'''
    return R * (1 + r * (1 - R/K) - a * C) 

def discrete_c(R, C):
    '''Calculates next step of the function'''
    return C * (1 - z + e * a * R)

def main(argv):
    '''Main function'''
    t = sc.linspace(0,15,200) 
    R = [10]
    C = [5]
    #Since the values for R, C depend on the previous value, using lambda 
    #functions or list comprehensions will not imporve velocity, but only
    #make the code less intuitive to read. Therefore, we use a for loop
    i = 1 #The 0 position is set when we set initial parameter values
    #Prealocate variables
    R = R + (len(t)-1)*[0]
    C = C + (len(t)-1)*[0]
    while i < len(t):
        R[i] = discrete_r(R[i-1], C[i-1])
        C[i] = discrete_c(R[i-1], C[i-1])
        i += 1

    #Plot
    f1 = p.figure()
    f1.set_size_inches(8.27, 11.69)
    p.subplot(2,1,1)
    p.plot(t, R, 'g-', label='Resource density')
    p.plot(t, C, 'b-', label='Consumer density')

    p.grid()
    p.legend(loc='best')
    p.xlabel('Time')
    p.ylabel('Population density')
    p.title('Consumer-Resource population dynamics'+
            '\nr = %.1f, a = %.1f, z = %.1f, e = %.1f, K = %i'
             %(r, a, z, e, K))
    p.subplot(2,1,2)
    p.plot(R, C,  'r-', label = 'Cycle') # Plot
    p.grid()
    p.legend(loc='best')
    p.xlabel('Resource density')
    p.ylabel('Consumer density')
    p.title('Consumer-Resource population dynamics')
    f1.savefig('../Results/LV3_model.pdf') #Save figure

    return 0

## CODE ##

if (__name__ == '__main__'):
    status = main(sys.argv)
    sys.exit(status)
     

**********************************************************************

Testing LV3.py...

LV3.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 94.5

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.67997s

======================================================================
Inspecting script file profileme2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

'''Auxiliary script to be profiled'''

##Look up p.stats!
import scipy as sc


def my_squares(iters):
    '''Calculates squares using comprehension list'''
    out = [i ** 2 for i in range(iters)]
    return out

def my_sqares_2(iters):
    '''Calculates squares using for loop'''
    out = sc.ones(iters)
    for i in range(iters):
        out[i] = i**2
    return out

def my_squares_3(iters):#the fastest
    '''Calculates squares with matrices'''
    mat = sc.matrix(sc.arange(iters))
    out = sc.multiply(mat, mat)
    return out

def my_join(iters, string):
    '''Joins srings'''
    out = ''
    for i in range(iters):
        out += ", " + string
    return out

def run_my_funcs(x,y):
    '''Runs all the functions'''
    print(x,y)
    my_squares(x)
    my_join(x,y)
    my_sqares_2(x)
    my_squares_3(x)
    return 0

run_my_funcs(3000000,"My string")
**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 90.0

Output (only first 500 characters): 

**********************************************************************
3000000 My string

**********************************************************************

Code ran without errors

Time consumed = 2.26351s

======================================================================
Inspecting script file timeitme.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Comparing run time for using loops vs list comprehensions 
and loops vs the join method utilizing the timeit module"""

__appname__ = 'timeitme.py'
__author__ = 'Pablo Lechon (plechon@ucm.es)'
__version__ = '0.0.1'
__license__ = 'None'

##############################################################################
# loops vs. list comprehensions: which is faster?
##############################################################################

iters = 1000000

import timeit

from profileme import my_squares as my_squares_loops

from profileme2 import my_squares as my_squares_lc

##############################################################################
# loops vs. the join method for strings: which is faster?
##############################################################################

mystring = "my string"

from profileme import my_join as my_join_join

from profileme2 import my_join as my_join
**********************************************************************

Testing timeitme.py...

timeitme.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 90.0

Output (only first 500 characters): 

**********************************************************************
10000000 My string
3000000 My string

**********************************************************************

Code ran without errors

Time consumed = 8.69097s

======================================================================
Inspecting script file blackbirds.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

'''Regex exercise'''

import re
# Read the file (using a different, more python 3 way, just for fun!)
with open('../Data/blackbirds.txt', 'r') as f:
    text = f.read()

# replace \t's and \n's with a spaces:
text = text.replace('\t',' ')
text = text.replace('\n',' ')
# You may want to make other changes to the text. 

# In particular, note that there are "strange characters" (these are accents and
# non-ascii symbols) because we don't care for them, first transform to ASCII:

text = text.encode('ascii', 'ignore') # first encode into ascii bytes
text = text.decode('ascii', 'ignore') # Now decode back to string

# Now extend this script so that it captures the Kingdom, Phylum and Species
# name for each species and prints it out to screen neatly.
#First try to capture kingdom

textf = re.findall(r'Kingdom\s\w+|Phylum\s\w+|Species\s\w+\s\w+', text)
[print(i) for i in textf]

# Hint: you may want to use re.findall(my_reg, text)... Keep in mind that there
# are multiple ways to skin this cat! Your solution could involve multiple
# regular expression calls (easier!), or a single one (harder!)
**********************************************************************

Testing blackbirds.py...

blackbirds.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 88.0

Output (only first 500 characters): 

**********************************************************************
Kingdom Animalia
Phylum Chordata
Species Euphagus carolinus
Kingdom Animalia
Phylum Chordata
Species Euphagus cyanocephalus
Kingdom Animalia
Phylum Chordata
Species Turdus boulboul
Kingdom Animalia
Phylum Chordata
Species Agelaius assimilis

**********************************************************************

Code ran without errors

Time consumed = 0.02895s

======================================================================
Inspecting script file regex.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

'''Regex Practice'''

import re

match = re.search(r'2', 'it takes 2 to tango')
match.group()

match = re.search(r'\d.*' , "it takes 2 to tango")
match.group()

match = re.search(r'\s\w{1,3}\s', 'once upon a time')
match.group()

re.search(r'\w*\s\d.*\d', 'take 2 grams of H2O').group()

re.search(r'^\w*.*\s', 'once upon a time').group()
**********************************************************************

Testing regex.py...

regex.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 86.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.03311s

======================================================================
Inspecting script file profileme.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

'''Auxiliary function to be profiled'''

def my_squares(iters):
    '''Calculate squares with for loop'''
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters, string):
    '''Join strings'''
    out = ''
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_funcs(x,y):
    '''Run all functions'''
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0


run_my_funcs(10000000,"My string")
**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 82.5

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 6.55563s

======================================================================
Inspecting script file LV4.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

'''
Discrete version of LV2.py with random gaussian fluctuation in the resource
growth
'''

__appname__ = '[LV4.py]'
__author__ = 'Pablo Lechon (plechon@ucm.es)'
__version__ = '0.0.1'

## IMPORTS ##

import sys
import matplotlib.pylab as p
import scipy as sc

## CONSTANTS ##
if len(sys.argv) ==5:
    r = float(sys.argv[1])
    a = float(sys.argv[2])
    z = float(sys.argv[3])
    e = float(sys.argv[4])
    K = 15

else:
    r = 1.
    a = 0.1
    z = 1.5
    e = 0.75
    K = 35

## FUNCTIONS ##

def discrete_r(R, C, eps):
    '''Calculate next step of the R function'''
    return R * (1 + (r + eps) * (1 - R/K) - a * C) 

def discrete_c(R, C):
    '''Calculate next step of the C function'''
    return C * (1 - z + e * a * R)

def main(argv):
    '''Main function'''
    t = sc.linspace(0,15,200) 
    R = [10]
    C = [5]
    #Since the values for R, C depend on the previous value, using lambda 
    #functions or list comprehensions will not imporve velocity, but only
    #make the code less intuitive to read. Therefore, we use a for loop
    i = 1 #The 0 position is set when we set initial parameter values
    #Prealocate variables
    R = R + (len(t)-1)*[0]
    C = C + (len(t)-1)*[0]
    #Calculate values for the prealocated lists
    while i < len(t):
        eps = sc.random.normal(scale = 0.1)
        R[i] = discrete_r(R[i-1], C[i-1], eps)
        C[i] = discrete_c(R[i-1], C[i-1])
        i += 1

    #Plot
    f1 = p.figure()
    f1.set_size_inches(8.27, 11.69)
    p.subplot(2,1,1)
    p.plot(t, R, 'g-', label='Resource density')
    p.plot(t, C, 'b-', label='Consumer density')

    p.grid()
    p.legend(loc='best')
    p.xlabel('Time')
    p.ylabel('Population density')
    p.title('Consumer-Resource population dynamics'+
            '\nr = %.1f, a = %.1f, z = %.1f, e = %.1f, K = %i'
             %(r, a, z, e, K))
    p.subplot(2,1,2)
    p.plot(R, C,  'r-', label = 'Cycle') # Plot
    p.grid()
    p.legend(loc='best')
    p.xlabel('Resource density')
    p.ylabel('Consumer density')
    p.title('Consumer-Resource population dynamics')
    f1.savefig('../Results/LV4_model.pdf') #Save figure

    return 0

## CODE ##

if (__name__ == '__main__'):
    status = main(sys.argv)
    sys.exit(status)
     

**********************************************************************

Testing LV4.py...

LV4.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 79.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.70271s

======================================================================
Inspecting script file Test.R...

File contents are:
**********************************************************************
#!/usr/bin/env R

'''R test file to be called from python'''

print("Hello, this is R")
**********************************************************************

Testing Test.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Error: unexpected string constant in "'''R test file to be called from python'"
Execution halted

======================================================================
Inspecting script file fmr.R...

File contents are:
**********************************************************************
# Plots log(field metabolic rate) against log(body mass) for the Nagy et al 
# 1999 dataset to a file fmr.pdf.
# Writes the list of species names to species.csv

cat("Reading CSV\n")

nagy <- read.csv('../Data/NagyEtAl1999.csv', stringsAsFactors = FALSE)

cat("Creating graph\n")
pdf('../Results/fmr_plot.pdf', 11, 8.5)
col <- c(Aves='purple3', Mammalia='red3', Reptilia='green3')
plot(log10(nagy$M.g), log10(nagy$FMR.kJ.day.1), pch=19, col=col[nagy$Class], 
     xlab=~log[10](M), ylab=~log[10](FMR))
for(class in unique(nagy$Class)){
    model <- lm(log10(FMR.kJ.day.1) ~ log10(M.g), data=nagy[nagy$Class==class,])
    abline(model, col=col[class])
}
dev.off()

cat("Finished in R!\n")
**********************************************************************

Testing fmr.R...

Output (only first 500 characters): 

**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!

**********************************************************************

Code ran without errors

Time consumed = 0.17432s

======================================================================
Inspecting script file using_os.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

'''
Find directories and files that satisfy certain conditions using subprocess
'''

import subprocess
import numpy as np

# Use the subprocess.os module to get a list of files and  directories 
# in your ubuntu home directory 
# Get the user's home directory.
home = subprocess.os.path.expanduser("~")
subprocess.os.listdir(path = home)

# Hint: look in subprocess.os and/or subprocess.os.path and/or 
# subprocess.os.walk for helpful functions

#################################
#~Get a list of files and 
#~directories in your home/ that start with an uppercase 'C'

# Type your code here:
# Create a list to store the results.

# Use a for loop to walk through the home directory.
l_root = []
l_subdir = []
l_files = []
for (root, subdir, files) in subprocess.os.walk(home):
    l_subdir.append(subdir)
    l_files.append(files)

#Make flat list from list of lists
l_directories = [j for i in l_subdir for j in i]
l_files_ = [j for i in l_files for j in i]

#Select only those that start with C
dir_C = [i for i in l_directories if i.startswith('C')]
files_C = [i for i in l_files_ if i.startswith('C')]

#Join lists
DirFiles_C = dir_C + files_C
print('Directories and Files that start with C\n')
print(DirFiles_C, '\n')
#################################
# Get files and directories in your home/ that start with either an 
# upper or lower case 'C'

# Type your code here:
#Select only those that start with C or c

dir_C_c = [i for i in l_directories if i.lower().startswith('c')]
files_C_c = [i for i in l_files_ if i.lower().startswith('c')]

#Join lists
DirFiles_C_c = dir_C_c + files_C_c
print('Directories and Files that start with C or c\n')
print(DirFiles_C_c, '\n')
#################################
# Get only directories in your home/ that start with either an upper or 
#~lower case 'C' 

# Type your code here:
Dir_C_c = dir_C_c
print('Directories that start with C or c\n')
print(Dir_C_c, '\n')
**********************************************************************

Testing using_os.py...

using_os.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 77.0

Output (only first 500 characters): 

**********************************************************************
Directories and Files that start with C

['CommonHTML', 'Caligraphic', 'Crypto', 'Cipher', 'Cc', 'Cf', 'Core', 'CachedExtensions', 'Cc', 'Cf', 'Cc', 'Cf', 'Crash Reports', 'Compat', 'Conda', 'C', 'ConicBenchmarkUtilities', 'Colors', 'ClinicalTrialUtilities', 'ClusterTrees', 'CMake', 'CovarianceEstimation', 'CollisionDetection', 'Catsay', 'Contour', 'CMakeWrapper', 'CalibrationErrors', 'CuArrays', 'CoordinateTransformations', 'CImGui', 'Compat', 'CubicSplines', 'Caching', 'CommunityDetection', 'Co
**********************************************************************

Code ran without errors

Time consumed = 2.17862s

======================================================================
Inspecting script file LV1.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

'''
Integrates the Lotka-Volterra model and outputs a time series plot with the 
evolution of both species, as long as a phase diagram
'''

__appname__ = '[LV1.py]'
__author__ = 'Pablo Lechon (plechon@ucm.es)'
__version__ = '0.0.1'

## IMPORTS ##

import sys
import scipy as sc
import scipy.integrate as integrate
import matplotlib.pylab as p

## CONSTANTS ##

r = 1.
a = 0.1
z = 1.5
e = 0.75
t = sc.linspace(0, 15, 1000)
R0 = 10
C0 = 5
RC0 = sc.array([R0, C0])

## FUNCTIONS ##

def dCR_dt(pops, t=0):
    '''Model'''
    R = pops[0]
    C = pops[1]
    dRdt = r * R - a * R * C
    dCdt = -z * C + e * a * R * C

    return sc.array([dRdt, dCdt])

def main(argv):
    '''Main function'''
    pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
    f1 = p.figure()
    f1.set_size_inches(8.27, 11.69)#A4 paper
    p.subplot(2,1,1)
    p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
    p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
    p.grid()
    p.legend(loc='best')
    p.xlabel('Time')
    p.ylabel('Population density')
    p.title('Consumer-Resource population dynamics'+
            '\nr = %.1f, a = %.1f, z = %.1f, e = %.1f' %(r, a, z, e))

    p.subplot(2,1,2)
    p.plot(pops[:,0], pops[:,1], 'r-', label = 'Cycle') 
    p.grid()
    p.legend(loc='best')
    p.xlabel('Resource density')
    p.ylabel('Consumer density')
    p.title('Consumer-Resource population dynamics')
    f1.savefig('../Results/LV1_model.pdf') #Save figure
    return 0

## CODE ##

if (__name__ == '__main__'):
    status = main(sys.argv)
    sys.exit(status)
     

**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 74.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.75893s

======================================================================
Inspecting script file DrawFW.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

'''Draw network from class notes.'''

__appname__ = '[DrawFW.py]'
__author__ = 'Pablo Lechon (plechon@ucm.es)'
__version__ = '0.0.1'

## IMPORTS ##

import sys
import networkx as nx
import scipy as sc
import matplotlib.pyplot as p
import warnings
warnings.filterwarnings("ignore")

## CONSTANTS ##

## FUNCTIONS ##
def GenRdmAdjList(N = 2, C = 0.5):
    """
    Generate a syntetic foodweb
    """
    Ids = range(N)
    ALst = []
    for i in Ids:
        if sc.random.uniform(0,1,1) < C:
            Lnk = sc.random.choice(Ids,2).tolist()
            if Lnk[0] != Lnk[1]: #avoid self (e.g., cannibalistic) loops
                ALst.append(Lnk)
    return ALst

def main(argv):
    '''Main function'''
    MaxN = 30
    C = 0.75
    AdjL = sc.array(GenRdmAdjList(MaxN, C))
    Sps = sc.unique(AdjL)
    pos = nx.circular_layout(Sps)
    G = nx.Graph()
    G.add_nodes_from(Sps)
    G.add_edges_from(tuple(AdjL))
    SizRan = ([-10,10]) #use log10 scale
    Sizs = sc.random.uniform(SizRan[0],SizRan[1],MaxN)
    NodSizs= 1000 * (Sizs-min(Sizs))/(max(Sizs)-min(Sizs))
    nx.draw_networkx(G, pos, node_size = NodSizs)
    #save file
    p.savefig('../Results/network.pdf')
    return 0

## CODE ##

if (__name__ == '__main__'):
    status = main(sys.argv)
    sys.exit(status)
     

**********************************************************************

Testing DrawFW.py...

DrawFW.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 73.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.78133s

======================================================================
Inspecting script file Nets.R...

File contents are:
**********************************************************************
library(igraph,warn.conflicts = F, quietly = F) # Load the igraph package

rm(list = ls())

# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL				0# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 	0	28
# CEFAS					0	0
# Nonacademic/CASE						0

links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)

#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, 
		       diag=F)
        
#Test plot
# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 

# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]

# Set node size based on Number of PIs:
# V(net)$size <- V(net)$Pis*0.9

V(net)$size <- 50

# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight

#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"

E(net)$width <- 1+E(net)$weight/10

graphics.off()

svg("../Results/QMEENet.svg",width=7,height=7)

plot(net, edge.curved=0, vertex.label.color="black") 

legend(x=-1.5, y=-0.1, c("University","Hosting Partner", "Non-hosting Partner")
       , pch=21, col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)

dev.off()
**********************************************************************

Testing Nets.R...

Output (only first 500 characters): 

**********************************************************************
null device 
          1 

**********************************************************************

Encountered error (or warning):
Loading required package: methods

======================================================================
Inspecting script file Nets_R.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

'''Reproduction of the R network plot with python'''

__appname__ = '[Nets_R.py]'
__author__ = 'Pablo Lechon (plechon@ucm.es)'
__version__ = '0.0.1'

## IMPORTS ##

import sys
import networkx as nx
import scipy as sc
import pandas as pd
import matplotlib.pylab as p
from matplotlib.patches import Patch
from matplotlib.lines import Line2D
import warnings
warnings.filterwarnings("ignore")

## CONSTANTS ##


## FUNCTIONS ##

def main(argv):
    '''Main function'''
    #load data
    link = pd.read_csv('../Data/QMEE_Net_Mat_edges.csv')
    names_unis = link.columns
    names_unis = sc.arange(0,len(names_unis))
    link = sc.matrix(link)
    nodes = pd.read_csv('../Data/QMEE_Net_Mat_nodes.csv')
    col = []
    for i in nodes['Type']:
        if i == 'University':
            col.append('b')
        elif i == 'Hosting Partner':
            col.append('g')
        else:
            col.append('r')
    names_node_atrib = nodes.columns
    #Geting indeces of interactions in matrix
    ind = sc.nonzero(link)
    ind_tup = sc.array([tuple(i) for i in sc.transpose(ind)])
    weight = sc.array([link[i,j] for i,j in ind_tup])
    ind_tup = ind_tup[weight!=0]
    ind_tup = [tuple(i) for i in ind_tup]
    weight = weight[weight!=0]
    std_weight = 1 + weight/10
    plot = p.figure()
    G = nx.DiGraph()
    pos = nx.spring_layout(sc.array(names_unis).tolist())
    G.add_nodes_from(sc.array(names_unis).tolist())
    G.add_edges_from(ind_tup)
    M = G.number_of_edges()
    edge_colors = sc.log(weight/max(weight))
    nx.draw_networkx(G, pos, width = std_weight, node_color = col, 
            node_size = 2000, with_labels = False, edge_color = edge_colors,
            edge_cmap = p.cm.Blues, arrowstyle = 'fancy')
    nx.draw_networkx_labels(G, pos, labels = nodes['id'])
    legend_elements = [Patch(facecolor='b', 
                         label='University'),
                       Patch(facecolor='g',
                         label='Hosting Partner'),
                   Patch(facecolor='r', 
                         label='Non-Hosting Partners')]
    p.legend(handles=legend_elements, loc='best', framealpha = 0.4)
    p.savefig('../Results/Net.pdf')

    return 0

## CODE ##

if (__name__ == '__main__'):
    status = main(sys.argv)
    sys.exit(status)
     

**********************************************************************

Testing Nets_R.py...

Nets_R.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 70.5

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "/usr/lib/python3/dist-packages/networkx/drawing/layout.py", line 283, in fruchterman_reingold_layout
    raise ValueError
ValueError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "Nets_R.py", line 76, in <module>
    status = main(sys.argv)
  File "Nets_R.py", line 53, in main
    pos = nx.spring_layout(sc.array(names_unis).tolist())
  File "/usr/lib/python3/dist-packages/networkx/drawing/layout.py", line 287, in fruchterman_reingold_layout
    A = nx.to_numpy_matrix(G, weight=weight)
  File "/usr/lib/python3/dist-packages/networkx/convert_matrix.py", line 308, in to_numpy_matrix
    nodelist = G.nodes()
AttributeError: 'list' object has no attribute 'nodes'

======================================================================
Inspecting script file LV2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

'''
Integrates the Lotka-Volterra model with a modified prey-density dependence
and outputs a time series plot with the evolution of both species, as long as 
a phase diagram
'''

__appname__ = '[LV2.py]'
__author__ = 'Pablo Lechon (plechon@ucm.es)'
__version__ = '0.0.1'

## IMPORTS ##

import sys
import scipy as sc
import scipy.integrate as integrate
import matplotlib.pylab as p

## CONSTANTS ##
if len(sys.argv) ==5:
    r = float(sys.argv[1])
    a = float(sys.argv[2])
    z = float(sys.argv[3])
    e = float(sys.argv[4])
    K = 19

else:
    r = 1.
    a = 0.1
    z = 0.5
    e = 0.7
    K = 19
    
## FUNCTIONS ##

def dCR_dt(pops, t=0):
    '''Model'''
    R = pops[0]
    C = pops[1]
    dRdt = r * R*(1-R/K) - a * R * C
    dCdt = -z * C + e * a * R * C

    return sc.array([dRdt, dCdt])

def main(argv):
    '''Main function'''
    K = 50
    R0 = 10
    C0 = 5
    RC0 = sc.array([R0, C0])    
    t = sc.linspace(0, 80, 1000)
    pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
    print('Final population values:\nResource:', int(pops[-1,0]),
            '\nConsumer:', int(pops[-1,1]))
    f1 = p.figure()
    f1.set_size_inches(8.27, 11.69)#A4 paper
    p.subplot(2,1,1)
    p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
    p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
    p.grid()
    p.legend(loc='best')
    p.xlabel('Time')
    p.ylabel('Population density')
    p.title('Consumer-Resource population dynamics'+
            '\nr = %.1f,a = %.1f,z = %.1f,e = %.1f,K = %i' %(r, a, z, e, K))
    p.subplot(2,1,2)
    p.plot(pops[:,0], pops[:,1], 'r-', label = 'Cycle') 
    p.grid()
    p.legend(loc='best')
    p.xlabel('Resource density')
    p.ylabel('Consumer density')
    p.title('Consumer-Resource population dynamics')
    f1.savefig('../Results/LV2_model.pdf') #Save figure

    return 0

## CODE ##

if (__name__ == '__main__'):
    status = main(sys.argv)
    sys.exit(status)
     

**********************************************************************

Testing LV2.py...

LV2.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 67.5

Output (only first 500 characters): 

**********************************************************************
Final population values:
Resource: 7 
Consumer: 6

**********************************************************************

Code ran without errors

Time consumed = 0.77004s

======================================================================
Inspecting script file run_fm_r.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

'''Run an .R file from python and print in screen the R console output, as well
as wether the run was succesful or not'''

__appname__ = '[run_fm_r.py]'
__author__ = 'Pablo Lechon (plechon@ucm.es)'
__version__ = '0.0.1'

## IMPORTS ##

import sys
import subprocess

## CONSTANTS ##


## FUNCTIONS ##

def main(argv):
    '''Main function'''
    subprocess.Popen("Rscript --verbose fmr.R > ../Results/TestR.Rout 2> \
                 ../Results/TestR_errFile.Rout", shell=True).wait()
    f = open('../Results/TestR.Rout').readlines()    
    if f[0].startswith('Reading') and f[-1].startswith('Finished'):
        print('Succesful run!:')
        print(open('../Results/TestR.Rout').read())
    else:
        print('Unsuccesful run:')
        print(open('../Results/TestR.Rout').read())

    return 0

## CODE ##

if (__name__ == '__main__'):
    status = main(sys.argv)
    sys.exit(status)
     

**********************************************************************

Testing run_fm_r.py...

run_fm_r.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 65.0

Output (only first 500 characters): 

**********************************************************************
Succesful run!:
Reading CSV
Creating graph
null device 
          1 
Finished in R!


**********************************************************************

Code ran without errors

Time consumed = 0.19084s

======================================================================
Inspecting script file run_LV.sh...

File contents are:
**********************************************************************
#!/bin/bash 

#Runs both LV1.py and LV2.py
touch file1.txt file2.txt file3.txt file4.txt

echo 'Profiling for LV1.py :' > ../Results/profiling.txt
python3 -m cProfile LV1.py >> file1.txt && 
    sed '1q;d' file1.txt >> ../Results/profiling.txt
echo 'Profiling for LV2.py :' >> ../Results/profiling.txt
python3 -m cProfile LV2.py >> file2.txt && 
    sed '4q;d' file2.txt >> ../Results/profiling.txt 
echo 'Profiling for LV3.py :' >> ../Results/profiling.txt
python3 -m cProfile LV3.py >> file3.txt && 
    sed '1q;d' file3.txt >> ../Results/profiling.txt
echo 'Profiling for LV4.py :' >> ../Results/profiling.txt
python3 -m cProfile LV4.py >> file4.txt && 
    sed '1q;d' file4.txt >> ../Results/profiling.txt

rm file1.txt file2.txt file3.txt file4.txt

#Print results to screen
sed 's/^[ \t]*//;s/[ \t]*$/ /' < ../results/profiling.txt | sed '$!N;s/\n//'

#We can select a more discrete time vector so that there are less integration
#steps. The answer will be qualitatively equal, except for it will be a bit
#less precise.

**********************************************************************

Testing run_LV.sh...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
run_LV.sh: line 22: ../results/profiling.txt: No such file or directory

======================================================================
======================================================================
Finished running scripts

Ran into 4 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 65.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!