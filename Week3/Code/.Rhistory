#Plotting for data explorations.
#Data on Consumer-Resource (e.g, Predator-Prey) body mass
#ratios taken from the Ecological Archives of the ESA
#(Barnes et al. 2008, Ecology 89:881)
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
dim(MyDF)
#We don't like this plot, it is not informative
plot(MyDF$Predator.mass, MyDF$Prey.mass)
#Lets change the scale
plot(log(MyDF$Predator.mass), log(MyDF$Prey.mass))
#Specifiying the plot characters using pch
plot(log(MyDF$Predator.mass), log(MyDF$Prey.mass), pch = 20)
#Add labels
plot(log(MyDF$Predator.mass), log(MyDF$Prey.massss), pch = 20, xlab = 'Predator Mass (g)', ylab = 'Prey Mass (g)')
#Histogram variables
hist(MyDF$Predator.mass)
hist(log(MyDF$Predator.mass), xlab = 'Predator Mass (g)', ylab = 'Count')
#Make it more beautiful
hist(log(MyDF$Predator.mass), xlab = "Predator Mass (g)", ylab = "Count", col = "lightblue", border = 'pink',face = "bold")
hist(log(MyDF$Prey.mass), xlab = "Predator Mass (g)", ylab = "Count", col = "lightblue", border = 'pink')
setwd("~/Desktop/Imperial/CMEECourseWork/Week3/Code")
#Plotting for data explorations.
#Data on Consumer-Resource (e.g, Predator-Prey) body mass
#ratios taken from the Ecological Archives of the ESA
#(Barnes et al. 2008, Ecology 89:881)
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
dim(MyDF)
#We don't like this plot, it is not informative
plot(MyDF$Predator.mass, MyDF$Prey.mass)
#Lets change the scale
plot(log(MyDF$Predator.mass), log(MyDF$Prey.mass))
#Specifiying the plot characters using pch
plot(log(MyDF$Predator.mass), log(MyDF$Prey.mass), pch = 20)
#Add labels
plot(log(MyDF$Predator.mass), log(MyDF$Prey.massss), pch = 20, xlab = 'Predator Mass (g)', ylab = 'Prey Mass (g)')
#Histogram variables
hist(MyDF$Predator.mass)
hist(log(MyDF$Predator.mass), xlab = 'Predator Mass (g)', ylab = 'Count')
#Make it more beautiful
hist(log(MyDF$Predator.mass), xlab = "Predator Mass (g)", ylab = "Count",
col = "lightblue", border = 'pink',face = "bold")
hist(log(MyDF$Prey.mass), xlab = "Predator Mass (g)", ylab = "Count",
col = "lightblue", border = 'pink')
?hist
op <- par(mfrow = c(2, 2))
hist(islands)
utils::str(hist(islands, col = "gray", labels = TRUE))
hist(sqrt(islands), breaks = 12, col = "lightblue", border = "pink")
##-- For non-equidistant breaks, counts should NOT be graphed unscaled:
r <- hist(sqrt(islands), breaks = c(4*0:5, 10*3:5, 70, 100, 140),
col = "blue1")
text(r$mids, r$density, r$counts, adj = c(.5, -.5), col = "blue3")
sapply(r[2:3], sum)
sum(r$density * diff(r$breaks)) # == 1
lines(r, lty = 3, border = "purple") # -> lines.histogram(*)
par(op)
require(utils) # for str
str(hist(islands, breaks = 12, plot =  FALSE)) #-> 10 (~= 12) breaks
str(hist(islands, breaks = c(12,20,36,80,200,1000,17000), plot = FALSE))
hist(islands, breaks = c(12,20,36,80,200,1000,17000), freq = TRUE,
main = "WRONG histogram") # and warning
## Extreme outliers; the "FD" rule would take very large number of 'breaks':
XXL <- c(1:9, c(-1,1)*1e300)
hh <- hist(XXL, "FD") # did not work in R <= 3.4.1; now gives warning
## pretty() determines how many counts are used (platform dependently!):
length(hh$breaks) ## typically 1 million -- though 1e6 was "a suggestion only"
require(stats)
set.seed(14)
x <- rchisq(100, df = 4)
## Comparing data with a model distribution should be done with qqplot()!
qqplot(x, qchisq(ppoints(x), df = 4)); abline(0, 1, col = 2, lty = 2)
## if you really insist on using hist() ... :
hist(x, freq = FALSE, ylim = c(0, 0.2))
curve(dchisq(x, df = 4), col = 2, lty = 2, lwd = 2, add = TRUE)
