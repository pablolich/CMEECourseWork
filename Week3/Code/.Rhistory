Exponential <- function(N0 = 1, r = 1, generations = 10){
#Runs a simulation of exonential growth
#Returns a vector of length generations
N <- rep(NA, generations) #Creates a vector of NA
N[1] <- N0
for (t in 2:generations){
N[t] <- N[t-1] * exp(r)
browser()
}
return(N)
}
plot(Exponential(), type = 'l', main = 'Exponential grouth')
Q
setwd("~/Desktop/Imperial/CMEECourseWork/Week3/Code")
Exponential <- function(N0 = 1, r = 1, generations = 10){
#Runs a simulation of exonential growth
#Returns a vector of length generations
N <- rep(NA, generations) #Creates a vector of NA
N[1] <- N0
browser()
for (t in 2:generations){
N[t] <- N[t-1] * exp(r)
}
return(N)
}
plot(Exponential(), type = 'l', main = 'Exponential grouth')
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv", header = F, stringsAsFactors = F))
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv", header = T, sep = ";", stringsAsFactors = F)
class(MyData)
head(MyData)
view(MyData)
fix(MyData)
View(MyData)
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
head(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
install.packages("reshape2")
library(reshape2)
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
?melt #check out the melt function
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
head(MyData)
?melt
?melt
MyWrangledData
TempData
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
MyWrangledData
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
MyMetaData
MyMetaData
install.packages("dplyr")
library(dplyr)
install.packages("tidyr")
library(tidyr)
dplyr::tbl_df(MyWrangledData)
dplyr::glimpse(MyWrangledData)
dplyr::filter(MyWrangledData)
?fix
# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
MyMetaData
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = F))
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = F))
MyData
fix(MyData)
utils::View(MyData)
fix(MyWrangledData)
dplyr::filter(MyWrangledData, Count > 100)
?subset
dplyr::slice(MyWrangledData, 10:15)
MyDF <- read.csv('../Data/EcolArchives-E089-51-D1.csv')
dim(MyDF)
